#! /usr/bin/python

import os
import sys
import optparse

import st.common as common
import st.log as log
import st.accounts as accounts
import st.relativetime as relativetime


OPTIONS = None

def say(stuff):
    if not OPTIONS.quiet:
        print(stuff)

def main():
    # parse args
    parser = optparse.OptionParser(usage = "%prog [OPTIONS] [LOG_DIRECTORY]",
                                   description = "Command-line portable player log scrobbler",
                                   version = "%s\nWritten by: Vincent Verdeil <werdeil@hotmail.com>" %(common.version))

    parser.add_option("-q", "--quiet", action="store_true", default=False)
    parser.add_option("-r", "--remove", action="store_true", default=False)
    global OPTIONS
    (OPTIONS, args) = parser.parse_args()

    # read the accounts
    accounts_to_scrobble = accounts.get_accounts()
    if len(accounts_to_scrobble) < 1:
        accounts.write_default_accounts()
        say("Error:\n"+
            "Could not find any account information.\n"+
            "Please configure at least one account in the file:\n%s" %(common.get_config_path("accounts.config"))
           )
        sys.exit(1)

    # find log (or probe for one)
    paths = log.get_paths(*args)

    if len(paths) < 1:
        say("Error:\n"+
            "Could not find any valid log file.\nPlease specify one in the command line arguments.")
        sys.exit(1)

    # start scrobbling
    for path in paths:
        say("Read log from %s" %(os.path.dirname(path)))
        tracks = log.parse(path)
        for track in tracks:
            say(" [%s] %s - %s " %(relativetime.get_relative_time(track.timestamp), track.artist, track.title))

            for account_to_scrobble in accounts_to_scrobble:
                # add to the list of tracks to be scrobbled
                account_to_scrobble.add_to_scrobble_cache(track)

        say("")

        # now submit
        for account_to_scrobble in accounts_to_scrobble:
            say("Submitting %d tracks to %s..." %(len(account_to_scrobble.cache), account_to_scrobble.username + "@" + account_to_scrobble.server))
            account_to_scrobble.scrobble()

    # success
    say ("\nAll tracks were scrobbled successfully.")

    if OPTIONS.remove:
        try:
            for path in paths:
                os.remove(path)
            say("All log files were removed.")
        except:
            say("Some or all log files could not be removed. Please remove them manually.")
            say("\n".join(paths))

    sys.exit(0)

if __name__ == "__main__":
    main()
